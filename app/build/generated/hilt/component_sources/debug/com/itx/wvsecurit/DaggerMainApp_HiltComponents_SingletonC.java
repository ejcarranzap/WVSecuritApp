// Generated by Dagger (https://dagger.dev).
package com.itx.wvsecurit;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import com.itx.wvsecurit.data.database.GeoAlertTypeRepository;
import com.itx.wvsecurit.data.database.GeoLocationAlertRepository;
import com.itx.wvsecurit.data.database.GeoLocationRepository;
import com.itx.wvsecurit.data.database.SegIncidentRepository;
import com.itx.wvsecurit.data.database.SegIncidentTypeRepository;
import com.itx.wvsecurit.data.database.SegNewsRepository;
import com.itx.wvsecurit.data.database.WvSecuritDatabase;
import com.itx.wvsecurit.data.database.dao.GeoAlertTypeDao;
import com.itx.wvsecurit.data.database.dao.GeoLocationAlertDao;
import com.itx.wvsecurit.data.database.dao.GeoLocationDao;
import com.itx.wvsecurit.data.database.dao.SegIncidentDao;
import com.itx.wvsecurit.data.database.dao.SegIncidentTypeDao;
import com.itx.wvsecurit.data.database.dao.SegNewsDao;
import com.itx.wvsecurit.data.network.FileDownloadApiClient;
import com.itx.wvsecurit.data.network.GeoAlertTypeApiClient;
import com.itx.wvsecurit.data.network.GeoLocationAlertApiClient;
import com.itx.wvsecurit.data.network.GeoLocationApiClient;
import com.itx.wvsecurit.data.network.LoginApiClient;
import com.itx.wvsecurit.data.network.SegIncidentApiClient;
import com.itx.wvsecurit.data.network.SegIncidentTypeApiClient;
import com.itx.wvsecurit.data.network.SegNewsApiClient;
import com.itx.wvsecurit.data.network.SendMailService;
import com.itx.wvsecurit.data.network.UploadService;
import com.itx.wvsecurit.data.preferences.SharedPreferencesRepository;
import com.itx.wvsecurit.di.DialogModule;
import com.itx.wvsecurit.di.DialogModule_ProvideMyAlertDialogFactory;
import com.itx.wvsecurit.di.DialogModule_ProvideMyCustomDialogFragmentFactory;
import com.itx.wvsecurit.di.RoomModule;
import com.itx.wvsecurit.di.RoomModule_ProvideGeoAlertTypeDaoFactory;
import com.itx.wvsecurit.di.RoomModule_ProvideGeoLocationAlertDaoFactory;
import com.itx.wvsecurit.di.RoomModule_ProvideGeoLocationDaoFactory;
import com.itx.wvsecurit.di.RoomModule_ProvideRoomFactory;
import com.itx.wvsecurit.di.RoomModule_ProvideSegIncidentDaoFactory;
import com.itx.wvsecurit.di.RoomModule_ProvideSegIncidentTypeDaoFactory;
import com.itx.wvsecurit.di.RoomModule_ProvideSegNewsDaoFactory;
import com.itx.wvsecurit.di.SessionModule;
import com.itx.wvsecurit.di.SessionModule_ProvideEditorFactory;
import com.itx.wvsecurit.di.SessionModule_ProvideSharedPreferencesFactory;
import com.itx.wvsecurit.di.ffNetworkModule;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideFileDownloadApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideGeoAlertTypeApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideGeoLocationAlertApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideGeoLocationApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideGsonFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideLoginApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideMyInterceptorFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideRetrofitFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideSegIncidentApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideSegIncidentTypeApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideSegNewsApiClientFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideSendMailFactory;
import com.itx.wvsecurit.di.ffNetworkModule_ProvideUploadServiceFactory;
import com.itx.wvsecurit.domain.usecase.AddGeoLocationUseCase;
import com.itx.wvsecurit.domain.usecase.AddSegIncidentUseCase;
import com.itx.wvsecurit.domain.usecase.GetLoginUseCase;
import com.itx.wvsecurit.domain.usecase.GetSegIncidentTypeUseCase;
import com.itx.wvsecurit.tool.LocationService;
import com.itx.wvsecurit.tool.LocationService_MembersInjector;
import com.itx.wvsecurit.tool.MyCustomDialogFragment;
import com.itx.wvsecurit.tool.MyDialog;
import com.itx.wvsecurit.tool.MyInterceptor;
import com.itx.wvsecurit.ui.view.IncidentActivity;
import com.itx.wvsecurit.ui.view.IncidentActivity_MembersInjector;
import com.itx.wvsecurit.ui.view.LoginActivity;
import com.itx.wvsecurit.ui.view.LoginActivity_MembersInjector;
import com.itx.wvsecurit.ui.view.MainActivity;
import com.itx.wvsecurit.ui.view.MainActivity_MembersInjector;
import com.itx.wvsecurit.ui.view.NewsActivity;
import com.itx.wvsecurit.ui.view.NewsActivity_MembersInjector;
import com.itx.wvsecurit.ui.viewmodel.GeoLocationViewModel;
import com.itx.wvsecurit.ui.viewmodel.GeoLocationViewModel_HiltModules_KeyModule_ProvideFactory;
import com.itx.wvsecurit.ui.viewmodel.LoadingViewModel;
import com.itx.wvsecurit.ui.viewmodel.LoadingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.itx.wvsecurit.ui.viewmodel.SharedPreferencesViewModel;
import com.itx.wvsecurit.ui.viewmodel.SharedPreferencesViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMainApp_HiltComponents_SingletonC {
  private DaggerMainApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private SessionModule sessionModule;

    private ffNetworkModule ffNetworkModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder roomModule(RoomModule roomModule) {
      Preconditions.checkNotNull(roomModule);
      return this;
    }

    public Builder sessionModule(SessionModule sessionModule) {
      this.sessionModule = Preconditions.checkNotNull(sessionModule);
      return this;
    }

    public Builder ffNetworkModule(ffNetworkModule ffNetworkModule) {
      this.ffNetworkModule = Preconditions.checkNotNull(ffNetworkModule);
      return this;
    }

    public MainApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (sessionModule == null) {
        this.sessionModule = new SessionModule();
      }
      if (ffNetworkModule == null) {
        this.ffNetworkModule = new ffNetworkModule();
      }
      return new SingletonCImpl(applicationContextModule, sessionModule, ffNetworkModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MainApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public MainApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements MainApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MainApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, new DialogModule(), activity);
    }
  }

  private static final class FragmentCBuilder implements MainApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MainApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MainApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MainApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MainApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MainApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MainApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MainApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MainApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MainApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MainApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MainApp_HiltComponents.ActivityC {
    private final DialogModule dialogModule;

    private final Activity activity;

    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, DialogModule dialogModuleParam,
        Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.dialogModule = dialogModuleParam;
      this.activity = activityParam;

    }

    private SegIncidentTypeRepository segIncidentTypeRepository() {
      return new SegIncidentTypeRepository(singletonCImpl.provideSegIncidentTypeDaoProvider.get());
    }

    private GetSegIncidentTypeUseCase getSegIncidentTypeUseCase() {
      return new GetSegIncidentTypeUseCase(singletonCImpl.provideSegIncidentTypeApiClientProvider.get());
    }

    private SegIncidentRepository segIncidentRepository() {
      return new SegIncidentRepository(singletonCImpl.provideSegIncidentDaoProvider.get());
    }

    private AlertDialog alertDialog() {
      return DialogModule_ProvideMyAlertDialogFactory.provideMyAlertDialog(dialogModule, activity);
    }

    private MyDialog myDialog() {
      return new MyDialog(alertDialog());
    }

    private AddSegIncidentUseCase addSegIncidentUseCase() {
      return new AddSegIncidentUseCase(singletonCImpl.provideSegIncidentApiClientProvider.get());
    }

    private GetLoginUseCase getLoginUseCase() {
      return new GetLoginUseCase(singletonCImpl.provideLoginApiClientProvider.get());
    }

    private GeoLocationRepository geoLocationRepository() {
      return new GeoLocationRepository(singletonCImpl.provideGeoLocationDaoProvider.get());
    }

    private AddGeoLocationUseCase addGeoLocationUseCase() {
      return new AddGeoLocationUseCase(singletonCImpl.provideGeoLocationApiClientProvider.get());
    }

    private GeoAlertTypeRepository geoAlertTypeRepository() {
      return new GeoAlertTypeRepository(singletonCImpl.provideGeoAlertTypeDaoProvider.get());
    }

    private GeoLocationAlertRepository geoLocationAlertRepository() {
      return new GeoLocationAlertRepository(singletonCImpl.provideGeoLocationAlertDaoProvider.get());
    }

    private MyCustomDialogFragment myCustomDialogFragment() {
      return DialogModule_ProvideMyCustomDialogFragmentFactory.provideMyCustomDialogFragment(dialogModule, activity);
    }

    private SegNewsRepository segNewsRepository() {
      return new SegNewsRepository(singletonCImpl.provideSegNewsDaoProvider.get());
    }

    @Override
    public void injectIncidentActivity(IncidentActivity incidentActivity) {
      injectIncidentActivity2(incidentActivity);
    }

    @Override
    public void injectLoginActivity(LoginActivity loginActivity) {
      injectLoginActivity2(loginActivity);
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public void injectNewsActivity(NewsActivity newsActivity) {
      injectNewsActivity2(newsActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(3).add(GeoLocationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoadingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SharedPreferencesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    private IncidentActivity injectIncidentActivity2(IncidentActivity instance) {
      IncidentActivity_MembersInjector.injectSegIncidentTypeRepository(instance, segIncidentTypeRepository());
      IncidentActivity_MembersInjector.injectSegIncidentTypeUseCase(instance, getSegIncidentTypeUseCase());
      IncidentActivity_MembersInjector.injectSharedPreferencesRepository(instance, singletonCImpl.sharedPreferencesRepository());
      IncidentActivity_MembersInjector.injectSegIncidentRepository(instance, segIncidentRepository());
      IncidentActivity_MembersInjector.injectMyDialog(instance, myDialog());
      IncidentActivity_MembersInjector.injectUploadService(instance, singletonCImpl.provideUploadServiceProvider.get());
      IncidentActivity_MembersInjector.injectAddIncidentUseCase(instance, addSegIncidentUseCase());
      return instance;
    }

    private LoginActivity injectLoginActivity2(LoginActivity instance) {
      LoginActivity_MembersInjector.injectGetLoginUseCase(instance, getLoginUseCase());
      LoginActivity_MembersInjector.injectMyDialog(instance, myDialog());
      return instance;
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectSharedPreferencesRepository(instance, singletonCImpl.sharedPreferencesRepository());
      MainActivity_MembersInjector.injectGeoLocationRepository(instance, geoLocationRepository());
      MainActivity_MembersInjector.injectAddGeoLocationUseCase(instance, addGeoLocationUseCase());
      MainActivity_MembersInjector.injectSegIncidentRepository(instance, segIncidentRepository());
      MainActivity_MembersInjector.injectAddSegIncidentUseCase(instance, addSegIncidentUseCase());
      MainActivity_MembersInjector.injectGeoAlertTypeRepository(instance, geoAlertTypeRepository());
      MainActivity_MembersInjector.injectProvideGeoAlertTypeApiClient(instance, singletonCImpl.provideGeoAlertTypeApiClientProvider.get());
      MainActivity_MembersInjector.injectGeoLocationAlertRepository(instance, geoLocationAlertRepository());
      MainActivity_MembersInjector.injectProvideGeoLocationAlertApiClient(instance, singletonCImpl.provideGeoLocationAlertApiClientProvider.get());
      MainActivity_MembersInjector.injectMyDialog(instance, myDialog());
      MainActivity_MembersInjector.injectMyCustomDialog(instance, myCustomDialogFragment());
      MainActivity_MembersInjector.injectSendMailService(instance, singletonCImpl.provideSendMailProvider.get());
      return instance;
    }

    private NewsActivity injectNewsActivity2(NewsActivity instance) {
      NewsActivity_MembersInjector.injectSegNewsRepository(instance, segNewsRepository());
      NewsActivity_MembersInjector.injectProvideSegNewsApiClient(instance, singletonCImpl.provideSegNewsApiClientProvider.get());
      NewsActivity_MembersInjector.injectMyDialog(instance, myDialog());
      NewsActivity_MembersInjector.injectProvideFileDownloadApiClient(instance, singletonCImpl.provideFileDownloadApiClientProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends MainApp_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<GeoLocationViewModel> geoLocationViewModelProvider;

    private Provider<LoadingViewModel> loadingViewModelProvider;

    private Provider<SharedPreferencesViewModel> sharedPreferencesViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.geoLocationViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.loadingViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.sharedPreferencesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(3).put("com.itx.wvsecurit.ui.viewmodel.GeoLocationViewModel", ((Provider) geoLocationViewModelProvider)).put("com.itx.wvsecurit.ui.viewmodel.LoadingViewModel", ((Provider) loadingViewModelProvider)).put("com.itx.wvsecurit.ui.viewmodel.SharedPreferencesViewModel", ((Provider) sharedPreferencesViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.itx.wvsecurit.ui.viewmodel.GeoLocationViewModel 
          return (T) new GeoLocationViewModel();

          case 1: // com.itx.wvsecurit.ui.viewmodel.LoadingViewModel 
          return (T) new LoadingViewModel();

          case 2: // com.itx.wvsecurit.ui.viewmodel.SharedPreferencesViewModel 
          return (T) new SharedPreferencesViewModel(singletonCImpl.sharedPreferencesRepository());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MainApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MainApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }

    private GeoLocationRepository geoLocationRepository() {
      return new GeoLocationRepository(singletonCImpl.provideGeoLocationDaoProvider.get());
    }

    private AddGeoLocationUseCase addGeoLocationUseCase() {
      return new AddGeoLocationUseCase(singletonCImpl.provideGeoLocationApiClientProvider.get());
    }

    @Override
    public void injectLocationService(LocationService locationService) {
      injectLocationService2(locationService);
    }

    private LocationService injectLocationService2(LocationService instance) {
      LocationService_MembersInjector.injectGeoLocationRepository(instance, geoLocationRepository());
      LocationService_MembersInjector.injectAddGeoLocationUseCase(instance, addGeoLocationUseCase());
      LocationService_MembersInjector.injectSharedPreferencesRepository(instance, singletonCImpl.sharedPreferencesRepository());
      return instance;
    }
  }

  private static final class SingletonCImpl extends MainApp_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final ffNetworkModule ffNetworkModule;

    private final SessionModule sessionModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<WvSecuritDatabase> provideRoomProvider;

    private Provider<SegIncidentTypeDao> provideSegIncidentTypeDaoProvider;

    private Provider<SharedPreferences> provideSharedPreferencesProvider;

    private Provider<SharedPreferences.Editor> provideEditorProvider;

    private Provider<MyInterceptor> provideMyInterceptorProvider;

    private Provider<Gson> provideGsonProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<SegIncidentTypeApiClient> provideSegIncidentTypeApiClientProvider;

    private Provider<SegIncidentDao> provideSegIncidentDaoProvider;

    private Provider<UploadService> provideUploadServiceProvider;

    private Provider<SegIncidentApiClient> provideSegIncidentApiClientProvider;

    private Provider<LoginApiClient> provideLoginApiClientProvider;

    private Provider<GeoLocationDao> provideGeoLocationDaoProvider;

    private Provider<GeoLocationApiClient> provideGeoLocationApiClientProvider;

    private Provider<GeoAlertTypeDao> provideGeoAlertTypeDaoProvider;

    private Provider<GeoAlertTypeApiClient> provideGeoAlertTypeApiClientProvider;

    private Provider<GeoLocationAlertDao> provideGeoLocationAlertDaoProvider;

    private Provider<GeoLocationAlertApiClient> provideGeoLocationAlertApiClientProvider;

    private Provider<SendMailService> provideSendMailProvider;

    private Provider<SegNewsDao> provideSegNewsDaoProvider;

    private Provider<SegNewsApiClient> provideSegNewsApiClientProvider;

    private Provider<FileDownloadApiClient> provideFileDownloadApiClientProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        SessionModule sessionModuleParam, ffNetworkModule ffNetworkModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      this.ffNetworkModule = ffNetworkModuleParam;
      this.sessionModule = sessionModuleParam;
      initialize(applicationContextModuleParam, sessionModuleParam, ffNetworkModuleParam);

    }

    private SharedPreferencesRepository sharedPreferencesRepository() {
      return new SharedPreferencesRepository(provideSharedPreferencesProvider.get(), provideEditorProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final SessionModule sessionModuleParam, final ffNetworkModule ffNetworkModuleParam) {
      this.provideRoomProvider = DoubleCheck.provider(new SwitchingProvider<WvSecuritDatabase>(singletonCImpl, 1));
      this.provideSegIncidentTypeDaoProvider = DoubleCheck.provider(new SwitchingProvider<SegIncidentTypeDao>(singletonCImpl, 0));
      this.provideSharedPreferencesProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonCImpl, 5));
      this.provideEditorProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences.Editor>(singletonCImpl, 6));
      this.provideMyInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<MyInterceptor>(singletonCImpl, 4));
      this.provideGsonProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonCImpl, 7));
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 3));
      this.provideSegIncidentTypeApiClientProvider = DoubleCheck.provider(new SwitchingProvider<SegIncidentTypeApiClient>(singletonCImpl, 2));
      this.provideSegIncidentDaoProvider = DoubleCheck.provider(new SwitchingProvider<SegIncidentDao>(singletonCImpl, 8));
      this.provideUploadServiceProvider = DoubleCheck.provider(new SwitchingProvider<UploadService>(singletonCImpl, 9));
      this.provideSegIncidentApiClientProvider = DoubleCheck.provider(new SwitchingProvider<SegIncidentApiClient>(singletonCImpl, 10));
      this.provideLoginApiClientProvider = DoubleCheck.provider(new SwitchingProvider<LoginApiClient>(singletonCImpl, 11));
      this.provideGeoLocationDaoProvider = DoubleCheck.provider(new SwitchingProvider<GeoLocationDao>(singletonCImpl, 12));
      this.provideGeoLocationApiClientProvider = DoubleCheck.provider(new SwitchingProvider<GeoLocationApiClient>(singletonCImpl, 13));
      this.provideGeoAlertTypeDaoProvider = DoubleCheck.provider(new SwitchingProvider<GeoAlertTypeDao>(singletonCImpl, 14));
      this.provideGeoAlertTypeApiClientProvider = DoubleCheck.provider(new SwitchingProvider<GeoAlertTypeApiClient>(singletonCImpl, 15));
      this.provideGeoLocationAlertDaoProvider = DoubleCheck.provider(new SwitchingProvider<GeoLocationAlertDao>(singletonCImpl, 16));
      this.provideGeoLocationAlertApiClientProvider = DoubleCheck.provider(new SwitchingProvider<GeoLocationAlertApiClient>(singletonCImpl, 17));
      this.provideSendMailProvider = DoubleCheck.provider(new SwitchingProvider<SendMailService>(singletonCImpl, 18));
      this.provideSegNewsDaoProvider = DoubleCheck.provider(new SwitchingProvider<SegNewsDao>(singletonCImpl, 19));
      this.provideSegNewsApiClientProvider = DoubleCheck.provider(new SwitchingProvider<SegNewsApiClient>(singletonCImpl, 20));
      this.provideFileDownloadApiClientProvider = DoubleCheck.provider(new SwitchingProvider<FileDownloadApiClient>(singletonCImpl, 21));
    }

    @Override
    public void injectMainApp(MainApp mainApp) {
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.itx.wvsecurit.data.database.dao.SegIncidentTypeDao 
          return (T) RoomModule_ProvideSegIncidentTypeDaoFactory.provideSegIncidentTypeDao(singletonCImpl.provideRoomProvider.get());

          case 1: // com.itx.wvsecurit.data.database.WvSecuritDatabase 
          return (T) RoomModule_ProvideRoomFactory.provideRoom(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 2: // com.itx.wvsecurit.data.network.SegIncidentTypeApiClient 
          return (T) ffNetworkModule_ProvideSegIncidentTypeApiClientFactory.provideSegIncidentTypeApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 3: // retrofit2.Retrofit 
          return (T) ffNetworkModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.ffNetworkModule, singletonCImpl.provideMyInterceptorProvider.get(), singletonCImpl.provideGsonProvider.get());

          case 4: // com.itx.wvsecurit.tool.MyInterceptor 
          return (T) ffNetworkModule_ProvideMyInterceptorFactory.provideMyInterceptor(singletonCImpl.ffNetworkModule, singletonCImpl.sharedPreferencesRepository());

          case 5: // android.content.SharedPreferences 
          return (T) SessionModule_ProvideSharedPreferencesFactory.provideSharedPreferences(singletonCImpl.sessionModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 6: // android.content.SharedPreferences.Editor 
          return (T) SessionModule_ProvideEditorFactory.provideEditor(singletonCImpl.sessionModule, singletonCImpl.provideSharedPreferencesProvider.get());

          case 7: // com.google.gson.Gson 
          return (T) ffNetworkModule_ProvideGsonFactory.provideGson(singletonCImpl.ffNetworkModule);

          case 8: // com.itx.wvsecurit.data.database.dao.SegIncidentDao 
          return (T) RoomModule_ProvideSegIncidentDaoFactory.provideSegIncidentDao(singletonCImpl.provideRoomProvider.get());

          case 9: // com.itx.wvsecurit.data.network.UploadService 
          return (T) ffNetworkModule_ProvideUploadServiceFactory.provideUploadService(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 10: // com.itx.wvsecurit.data.network.SegIncidentApiClient 
          return (T) ffNetworkModule_ProvideSegIncidentApiClientFactory.provideSegIncidentApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 11: // com.itx.wvsecurit.data.network.LoginApiClient 
          return (T) ffNetworkModule_ProvideLoginApiClientFactory.provideLoginApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 12: // com.itx.wvsecurit.data.database.dao.GeoLocationDao 
          return (T) RoomModule_ProvideGeoLocationDaoFactory.provideGeoLocationDao(singletonCImpl.provideRoomProvider.get());

          case 13: // com.itx.wvsecurit.data.network.GeoLocationApiClient 
          return (T) ffNetworkModule_ProvideGeoLocationApiClientFactory.provideGeoLocationApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 14: // com.itx.wvsecurit.data.database.dao.GeoAlertTypeDao 
          return (T) RoomModule_ProvideGeoAlertTypeDaoFactory.provideGeoAlertTypeDao(singletonCImpl.provideRoomProvider.get());

          case 15: // com.itx.wvsecurit.data.network.GeoAlertTypeApiClient 
          return (T) ffNetworkModule_ProvideGeoAlertTypeApiClientFactory.provideGeoAlertTypeApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 16: // com.itx.wvsecurit.data.database.dao.GeoLocationAlertDao 
          return (T) RoomModule_ProvideGeoLocationAlertDaoFactory.provideGeoLocationAlertDao(singletonCImpl.provideRoomProvider.get());

          case 17: // com.itx.wvsecurit.data.network.GeoLocationAlertApiClient 
          return (T) ffNetworkModule_ProvideGeoLocationAlertApiClientFactory.provideGeoLocationAlertApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 18: // com.itx.wvsecurit.data.network.SendMailService 
          return (T) ffNetworkModule_ProvideSendMailFactory.provideSendMail(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 19: // com.itx.wvsecurit.data.database.dao.SegNewsDao 
          return (T) RoomModule_ProvideSegNewsDaoFactory.provideSegNewsDao(singletonCImpl.provideRoomProvider.get());

          case 20: // com.itx.wvsecurit.data.network.SegNewsApiClient 
          return (T) ffNetworkModule_ProvideSegNewsApiClientFactory.provideSegNewsApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          case 21: // com.itx.wvsecurit.data.network.FileDownloadApiClient 
          return (T) ffNetworkModule_ProvideFileDownloadApiClientFactory.provideFileDownloadApiClient(singletonCImpl.ffNetworkModule, singletonCImpl.provideRetrofitProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
