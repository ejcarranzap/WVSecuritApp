// Generated by Dagger (https://dagger.dev).
package com.itx.wvsecurit.ui.view;

import com.itx.wvsecurit.data.database.SegNewsRepository;
import com.itx.wvsecurit.data.network.FileDownloadApiClient;
import com.itx.wvsecurit.data.network.SegNewsApiClient;
import com.itx.wvsecurit.tool.MyDialog;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NewsActivity_MembersInjector implements MembersInjector<NewsActivity> {
  private final Provider<SegNewsRepository> segNewsRepositoryProvider;

  private final Provider<SegNewsApiClient> provideSegNewsApiClientProvider;

  private final Provider<MyDialog> myDialogProvider;

  private final Provider<FileDownloadApiClient> provideFileDownloadApiClientProvider;

  public NewsActivity_MembersInjector(Provider<SegNewsRepository> segNewsRepositoryProvider,
      Provider<SegNewsApiClient> provideSegNewsApiClientProvider,
      Provider<MyDialog> myDialogProvider,
      Provider<FileDownloadApiClient> provideFileDownloadApiClientProvider) {
    this.segNewsRepositoryProvider = segNewsRepositoryProvider;
    this.provideSegNewsApiClientProvider = provideSegNewsApiClientProvider;
    this.myDialogProvider = myDialogProvider;
    this.provideFileDownloadApiClientProvider = provideFileDownloadApiClientProvider;
  }

  public static MembersInjector<NewsActivity> create(
      Provider<SegNewsRepository> segNewsRepositoryProvider,
      Provider<SegNewsApiClient> provideSegNewsApiClientProvider,
      Provider<MyDialog> myDialogProvider,
      Provider<FileDownloadApiClient> provideFileDownloadApiClientProvider) {
    return new NewsActivity_MembersInjector(segNewsRepositoryProvider, provideSegNewsApiClientProvider, myDialogProvider, provideFileDownloadApiClientProvider);
  }

  @Override
  public void injectMembers(NewsActivity instance) {
    injectSegNewsRepository(instance, segNewsRepositoryProvider.get());
    injectProvideSegNewsApiClient(instance, provideSegNewsApiClientProvider.get());
    injectMyDialog(instance, myDialogProvider.get());
    injectProvideFileDownloadApiClient(instance, provideFileDownloadApiClientProvider.get());
  }

  @InjectedFieldSignature("com.itx.wvsecurit.ui.view.NewsActivity.segNewsRepository")
  public static void injectSegNewsRepository(NewsActivity instance,
      SegNewsRepository segNewsRepository) {
    instance.segNewsRepository = segNewsRepository;
  }

  @InjectedFieldSignature("com.itx.wvsecurit.ui.view.NewsActivity.provideSegNewsApiClient")
  public static void injectProvideSegNewsApiClient(NewsActivity instance,
      SegNewsApiClient provideSegNewsApiClient) {
    instance.provideSegNewsApiClient = provideSegNewsApiClient;
  }

  @InjectedFieldSignature("com.itx.wvsecurit.ui.view.NewsActivity.myDialog")
  public static void injectMyDialog(NewsActivity instance, MyDialog myDialog) {
    instance.myDialog = myDialog;
  }

  @InjectedFieldSignature("com.itx.wvsecurit.ui.view.NewsActivity.provideFileDownloadApiClient")
  public static void injectProvideFileDownloadApiClient(NewsActivity instance,
      FileDownloadApiClient provideFileDownloadApiClient) {
    instance.provideFileDownloadApiClient = provideFileDownloadApiClient;
  }
}
