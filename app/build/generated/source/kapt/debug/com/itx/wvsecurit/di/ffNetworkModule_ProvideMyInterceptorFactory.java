// Generated by Dagger (https://dagger.dev).
package com.itx.wvsecurit.di;

import com.itx.wvsecurit.data.preferences.SharedPreferencesRepository;
import com.itx.wvsecurit.tool.MyInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ffNetworkModule_ProvideMyInterceptorFactory implements Factory<MyInterceptor> {
  private final ffNetworkModule module;

  private final Provider<SharedPreferencesRepository> sharedPreferencesRepositoryProvider;

  public ffNetworkModule_ProvideMyInterceptorFactory(ffNetworkModule module,
      Provider<SharedPreferencesRepository> sharedPreferencesRepositoryProvider) {
    this.module = module;
    this.sharedPreferencesRepositoryProvider = sharedPreferencesRepositoryProvider;
  }

  @Override
  public MyInterceptor get() {
    return provideMyInterceptor(module, sharedPreferencesRepositoryProvider.get());
  }

  public static ffNetworkModule_ProvideMyInterceptorFactory create(ffNetworkModule module,
      Provider<SharedPreferencesRepository> sharedPreferencesRepositoryProvider) {
    return new ffNetworkModule_ProvideMyInterceptorFactory(module, sharedPreferencesRepositoryProvider);
  }

  public static MyInterceptor provideMyInterceptor(ffNetworkModule instance,
      SharedPreferencesRepository sharedPreferencesRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideMyInterceptor(sharedPreferencesRepository));
  }
}
